import * as React from 'react';
import * as Popper from "popper.js";

export interface IArrowChildrenProps {
  ref: (node: any) => void,
  
}

export interface IArrowProps {
  component?: React.ReactNode,
  componentFactory?: () => React.ReactNode,
  innerRef?: (ref: HTMLElement) => void
};

export class Arrow extends React.Component<IArrowProps> {
  render() {

    const { component = 'span', innerRef, children, ...restProps } = this.props;
    const { popper } = this.context;
    const arrowRef = node => {
      popper.setArrowNode(node)
      if (typeof innerRef === 'function') {
        innerRef(node)
      }
    }
    const arrowStyle = popper.getArrowStyle()

    if (typeof children === 'function') {
      const arrowProps = {
        ref: arrowRef,
        style: arrowStyle,
      }
      return children({ arrowProps, restProps })
    }

    const componentProps = {
      ...restProps,
      style: {
        ...arrowStyle,
        ...restProps.style,
      },
    }

    if (typeof component === 'string') {
      componentProps.ref = arrowRef
    } else {
      componentProps.innerRef = arrowRef
    }

    return React.createElement(component, componentProps, children);
  }
}